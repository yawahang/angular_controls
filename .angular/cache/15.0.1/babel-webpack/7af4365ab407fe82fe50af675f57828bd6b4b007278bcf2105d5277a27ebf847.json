{"ast":null,"code":"import { gridColumns } from './oh-table-demo.column';\nimport { gridData } from './oh-table-demo.data';\nimport { TableActionFormDialog } from './table-action-form.component';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/material/dialog\";\nimport * as i2 from \"../shared/oh-table/oh-table/oh-table.component\";\nimport * as i3 from \"@angular/common\";\nexport let OhTableDemoComponent = /*#__PURE__*/(() => {\n  class OhTableDemoComponent {\n    // Grid End\n    constructor(dialog) {\n      this.dialog = dialog;\n      // Grid Start\n      this.gridConfig = {\n        columns: [],\n        dataSource: {\n          data: [],\n          totalRows: 0\n        },\n        loading: true,\n        fileName: 'Employee_Export',\n        option: {\n          searchText: '',\n          filter: {\n            statusIdList: []\n          },\n          offset: 0,\n          pageSize: 10,\n          sortBy: 'name',\n          sortOrder: 'ASC'\n        },\n        rowActionOption: {\n          dblClickNavigationAction: 'Edit'\n        }\n      };\n      this.selectedRow = {};\n    }\n    ngOnInit() {\n      this.gridConfig.columns = gridColumns;\n      this.gridConfig.dataSource.data = gridData || [];\n      this.gridConfig.dataSource.totalRows = gridData.length || 0;\n      this.gridConfig.loading = false;\n      this.gridConfig = Object.assign({}, this.gridConfig); // refresh gridConfig\n    }\n    // Grid Start\n    onRowDblClick(row) {\n      this.selectedRow = Object.assign({}, row);\n      // edit form here\n    }\n\n    onRowClick(row) {\n      this.selectedRow = Object.assign({}, row);\n    }\n    onPageChange(event) {\n      if (event) {\n        this.gridConfig.option.offset = event.offset;\n        this.gridConfig.option.pageSize = event.pageSize;\n        // get grid data from server\n      }\n    }\n\n    onSortChange(event) {\n      if (event) {\n        this.gridConfig.option.sortBy = event.sortBy;\n        this.gridConfig.option.sortOrder = event.sortOrder;\n        // get grid data from server\n      }\n    }\n\n    onRowActionClick(event) {\n      if (event && event.action && event.row) {\n        this.selectedRow = Object.assign({}, event.row);\n        switch (event.action.navigationAction) {\n          case 'Add':\n            this.openFormDialog(event);\n          case 'Edit':\n            this.openFormDialog(event);\n            break;\n        }\n      }\n    }\n    openFormDialog(event) {\n      const dialogRef = this.dialog.open(TableActionFormDialog, {\n        data: {\n          data: event\n        }\n      });\n      dialogRef.afterClosed().subscribe(result => {});\n    }\n    // Grid End\n    ngOnDestroy() {}\n  }\n  OhTableDemoComponent.ɵfac = function OhTableDemoComponent_Factory(t) {\n    return new (t || OhTableDemoComponent)(i0.ɵɵdirectiveInject(i1.MatDialog));\n  };\n  OhTableDemoComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: OhTableDemoComponent,\n    selectors: [[\"oh-table-demo\"]],\n    decls: 31,\n    vars: 4,\n    consts: [[1, \"row\"], [3, \"config\", \"onRowActionClick\", \"onRowClick\", \"onRowDblClick\", \"onPageChange\", \"onSortChange\"], [1, \"pt-5\"]],\n    template: function OhTableDemoComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0)(1, \"h4\");\n        i0.ɵɵtext(2, \"Material table with more customizable features\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(3, \"hr\");\n        i0.ɵɵelementStart(4, \"oh-table\", 1);\n        i0.ɵɵlistener(\"onRowActionClick\", function OhTableDemoComponent_Template_oh_table_onRowActionClick_4_listener($event) {\n          return ctx.onRowActionClick($event);\n        })(\"onRowClick\", function OhTableDemoComponent_Template_oh_table_onRowClick_4_listener($event) {\n          return ctx.onRowClick($event);\n        })(\"onRowDblClick\", function OhTableDemoComponent_Template_oh_table_onRowDblClick_4_listener($event) {\n          return ctx.onRowDblClick($event);\n        })(\"onPageChange\", function OhTableDemoComponent_Template_oh_table_onPageChange_4_listener($event) {\n          return ctx.onPageChange($event);\n        })(\"onSortChange\", function OhTableDemoComponent_Template_oh_table_onSortChange_4_listener($event) {\n          return ctx.onSortChange($event);\n        });\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(5, \"h5\", 2);\n        i0.ɵɵtext(6, \"Selected row\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(7, \"pre\")(8, \"p\");\n        i0.ɵɵtext(9);\n        i0.ɵɵpipe(10, \"json\");\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelement(11, \"hr\");\n        i0.ɵɵelementStart(12, \"h5\", 2);\n        i0.ɵɵtext(13, \"Features\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(14, \"hr\");\n        i0.ɵɵelementStart(15, \"div\", 0)(16, \"ul\")(17, \"li\");\n        i0.ɵɵtext(18, \"Client side and server side sorting\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(19, \"li\");\n        i0.ɵɵtext(20, \"Client side and server side filter and pagination\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(21, \"li\");\n        i0.ɵɵtext(22, \"Download grid as excel sheet\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(23, \"li\");\n        i0.ɵɵtext(24, \"Inline gird actions\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(25, \"li\");\n        i0.ɵɵtext(26, \"Double click row for default action\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(27, \"li\");\n        i0.ɵɵtext(28, \"Drag and drop column ordering\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(29, \"li\");\n        i0.ɵɵtext(30, \"Row selection feature\");\n        i0.ɵɵelementEnd()()()();\n      }\n      if (rf & 2) {\n        i0.ɵɵadvance(4);\n        i0.ɵɵproperty(\"config\", ctx.gridConfig);\n        i0.ɵɵadvance(5);\n        i0.ɵɵtextInterpolate(i0.ɵɵpipeBind1(10, 2, ctx.selectedRow));\n      }\n    },\n    dependencies: [i2.OhTableComponent, i3.JsonPipe]\n  });\n  return OhTableDemoComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}